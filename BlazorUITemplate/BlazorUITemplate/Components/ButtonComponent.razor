@using BlazorUITemplate.Data
@using BlazorUITemplate.Enums
@using BlazorUITemplate.Pages
@using BlazorUITemplate.Services
@inject EventService EventService
@inherits BaseComponent
@if (ButtonModel.Id == null)
{
    <button class="draggable @ButtonClass" draggable="true"
            
            @ondragstart="@(() => OnDragStart (ButtonModel))">
        @ButtonModel.Name
    </button>
}
else
{
    <button class="dashboard-button resizable @ButtonClass" style="width:@Width; height:@Height;"
            @onclick="@(() => OnClick ())"
            @onmousemove="OnMouseMove"
            @onmouseleave="OnMouseMove"
            @onmouseout="OnMouseMove">
        @ButtonModel.Name
        <div class="resizer top" @onmousedown='(e) => StartResize (e, "top")'></div>
        <div class="resizer right" @onmousedown='(e) => StartResize (e, "right")'></div>
        <div class="resizer bottom" @onmousedown='(e) => StartResize (e, "bottom")'></div>
        <div class="resizer left" @onmousedown='(e) => StartResize (e, "left")'></div>
        <div class="resizer top-left" @onmousedown='(e) => StartResize (e, "top-left")'></div>
        <div class="resizer top-right" @onmousedown='(e) => StartResize (e, "top-right")'></div>
        <div class="resizer bottom-left" @onmousedown='(e) => StartResize (e, "bottom-left")'></div>
        <div class="resizer bottom-right" @onmousedown='(e) => StartResize (e, "bottom-right")'></div>
    </button>
}


@code {

    [Parameter] public ButtonModel ButtonModel { get; set; }

    [Parameter] public string Width { get; set; } = "150px";
    [Parameter] public string Height { get; set; } = "40px";
    [Parameter] public string ButtonClass { get; set; } = "";

    protected override void OnInitialized ()
    {
        base.OnInitialized ();
        ButtonClass = ButtonModel.ButtonColor == ButtonColor.Yellow ? "btn btn-warning" : "btn btn-primary";
    }

    private void StartResize (MouseEventArgs eventArgs, string resizer)
    {
        Resize (eventArgs, resizer, Width, Height);
    }

    private void OnMouseMove (MouseEventArgs eventArgs)
    {
        var size = MouseMove (eventArgs, Width, Height);
        Width = size.Item1;
        Height = size.Item2;
        StateHasChanged ();
    }


    private void OnMouseUp (MouseEventArgs eventArgs)
    {
        StopResize ();
    }

    private void OnDragStart (ButtonModel selectedButtonModel)
    {
        HandleDrag (selectedButtonModel);
    }

    private void OnClick ()
    {
        HandleClick (ComponentType.Button,ButtonModel.Id);
    }


}