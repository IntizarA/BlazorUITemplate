@using BlazorUITemplate.Data
@using BlazorUITemplate.Enums
@using BlazorUITemplate.Pages
@using BlazorUITemplate.Services
@inject EventService EventService

<div class="dashboard-dropzone @dropClass"
     ondragover="event.preventDefault();"
     ondragstart="event.dataTransfer.setData('',event.target.id)"
     @ondrop="HandleDrop"
     @ondragenter="HandleDragEnter"
     @ondragleave="HandleDragLeave">

    @foreach (var button in Buttons)
    {
        <ButtonComponent ButtonModel="@button"/>
    }

    @foreach (var input in Inputs)
    {
        <InputComponent InputModel="@input"/>
    }

</div>

@code {
    [CascadingParameter] Container Container { get; set; }
    List<ButtonModel> Buttons = new ();
    List<InputModel> Inputs = new ();
    List<ImageModel> Images = new ();

    string dropClass = "";

    protected override void OnInitialized ()
    {
        EventService.OnClearAll += HandleClearAll;
        EventService.OnRemoveSelected += OnRemoveSelectedEventHandler;
    }

    public void Dispose ()
    {
        EventService.OnClearAll -= HandleClearAll;
        EventService.OnRemoveSelected -= OnRemoveSelectedEventHandler;
    }

    #region Event Handlers

    private void HandleDragEnter ()
    {
        dropClass = "can-drop";
    }

    private void HandleDrop ()
    {
        switch (Container.DraggingType)
        {
            case ComponentType.Button:
                if (!Container.DraggingButton.IsDraggable)
                    return;
                ButtonModel buttonModel = new ()
                {
                    Id = Guid.NewGuid (),
                    IsDraggable = false,
                    Name = Container.DraggingButton.Name,
                    ButtonColor = Container.DraggingButton.ButtonColor
                };
                Buttons.Add (buttonModel);
                break;
            case ComponentType.Input:
                if (!Container.DraggingInput.IsDraggable)
                    return;
                InputModel inputModel = new ()
                {
                    Id = Guid.NewGuid (),
                    IsDraggable = false,
                    Placeholder = Container.DraggingInput.Placeholder
                };
                Inputs.Add (inputModel);

                break;
            case ComponentType.Image:

                if (!Container.DraggingImage.IsDraggable)
                    return;
                ImageModel imageModel = new ()
                {
                    Id = Guid.NewGuid (),
                    IsDraggable = false,
                    Url = Container.DraggingImage.Url
                };
                Images.Add (imageModel);
                break;
        }

        dropClass = "";
        StateHasChanged ();
    }

    private void HandleDragLeave ()
    {
        dropClass = "";
    }

    private async Task HandleClearAll ()
    {
        Buttons.Clear ();
        Inputs.Clear ();
        Images.Clear ();
        await InvokeAsync (StateHasChanged);
    }

    private bool OnRemoveSelectedEventHandler()
    {
        Console.WriteLine ("OnRemoveSelectedEventHandler");
        /*switch (Container.SelectedType)
        {
            case ComponentType.Button:
            {
                Console.WriteLine ("Type is button");
                ButtonModel? model = Buttons.FirstOrDefault(x => x.Id == Container.SelectedComponentId);
                
                if (model != null)
                {
                    Console.WriteLine ("model is not empty");
                    Buttons.Remove(model);
                    StateHasChanged ();
                    return true; 
                }
                break;
            }
            case ComponentType.Input:
            {
                InputModel? model = Inputs.FirstOrDefault(x => x.Id == Container.SelectedComponentId);
                if (model != null)
                {
                    Inputs.Remove(model);
                    StateHasChanged ();
                    return true; 
                }
                break;
            }
            case ComponentType.Image:
            {
                ImageModel? model = Images.FirstOrDefault(x => x.Id == Container.SelectedComponentId);
                if (model != null)
                {
                    Images.Remove(model);
                    StateHasChanged ();
                    return true; 
                }
                break;
            }
            default:
                return false; 
        }
        */

        return false; 
    }

    #endregion


}