@using BlazorUITemplate.Data
@using BlazorUITemplate.Enums
@using BlazorUITemplate.Pages
@using BlazorUITemplate.Services
@inject EventService EventService

<div class="dashboard-dropzone @dropClass"
     ondragover="event.preventDefault();"
     ondragstart="event.dataTransfer.setData('',event.target.id)"
     @ondrop="HandleDrop"
     @ondragenter="HandleDragEnter"
     @ondragleave="HandleDragLeave">

    @foreach (var button in Buttons)
    {
        <ButtonComponent ButtonModel="@button"/>
    }

    @foreach (var input in Inputs)
    {
        <InputComponent InputModel="@input"/>
    }

</div>

@code {
    [CascadingParameter] Container Container { get; set; }
    List<ButtonModel> Buttons = new ();
    List<InputModel> Inputs = new ();
    List<ImageModel> Images = new ();

    string dropClass = "";

    protected override void OnInitialized ()
    {
        EventService.OnClearAllClick += HandleClearAll;
        EventService.OnRemoveSelectedClick += HandleRemoveSelected;
    }

    public void Dispose ()
    {
        EventService.OnClearAllClick -= HandleClearAll;
        EventService.OnRemoveSelectedClick -= HandleRemoveSelected;
    }

    #region Event Handlers

    private void HandleDragEnter ()
    {
        
        switch (Container)
        {
            case { DraggingType: ComponentType.Button, DraggedButton.IsDraggable: false }:
            case { DraggingType: ComponentType.Input, DraggedInput.IsDraggable: false }:
            case { DraggingType: ComponentType.Image, DraggedImage.IsDraggable: false }:
                return;
            default:
                dropClass = "can-drop";
                break;
        }
    }

    private void HandleDrop ()
    {
        switch (Container.DraggingType)
        {
            case ComponentType.Button:
                if (!Container.DraggedButton.IsDraggable)
                    return;
                ButtonModel buttonModel = new ()
                {
                    Id = Guid.NewGuid (),
                    IsDraggable = false,
                    Name = Container.DraggedButton.Name,
                    ButtonColor = Container.DraggedButton.ButtonColor
                };
                Buttons.Add (buttonModel);
                break;
            case ComponentType.Input:
                if (!Container.DraggedInput.IsDraggable)
                    return;
                InputModel inputModel = new ()
                {
                    Id = Guid.NewGuid (),
                    IsDraggable = false,
                    Placeholder = Container.DraggedInput.Placeholder
                };
                Inputs.Add (inputModel);

                break;
            case ComponentType.Image:

                if (!Container.DraggedImage.IsDraggable)
                    return;
                ImageModel imageModel = new ()
                {
                    Id = Guid.NewGuid (),
                    IsDraggable = false,
                    Url = Container.DraggedImage.Url
                };
                Images.Add (imageModel);
                break;
            default:
                dropClass = "";
                break;
        }

       
        StateHasChanged ();
    }

    private void HandleDragLeave ()
    {
        dropClass = "";
    }

    private async Task HandleClearAll ()
    {
        if (Container.Buttons != null)
            Buttons.Clear ();
        await InvokeAsync (StateHasChanged);
    }

    private async Task HandleRemoveSelected ()
    {
        ButtonModel? model = Buttons.FirstOrDefault (x => x.Id != null && x.Id == Container.ClickedButtonId);
        if (model != null)
            Buttons.Remove (model);
        await InvokeAsync (StateHasChanged);
    }

    #endregion


}