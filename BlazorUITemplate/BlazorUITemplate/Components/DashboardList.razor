@using BlazorUITemplate.Data
@using BlazorUITemplate.Enums
@using BlazorUITemplate.Pages
@using BlazorUITemplate.Services
@inject EventService EventService

<div class="dashboard-dropzone @dropClass"
     ondragover="event.preventDefault();"
     ondragstart="event.dataTransfer.setData('',event.target.id)"
     @ondrop="HandleDrop"
     @ondragenter="HandleDragEnter"
     @ondragleave="HandleDragLeave">

    @foreach (var button in Buttons)
    {
        <ButtonComponent ButtonModel="@button"/>
    }
</div>

@code {
    [CascadingParameter] Container Container { get; set; }
    List<ButtonModel> Buttons = new ();

    string dropClass = "";

    protected override void OnInitialized ()
    {
        EventService.OnClearAllClick += HandleClearAll;
        EventService.OnRemoveSelectedClick += HandleRemoveSelected;
    }

    public void Dispose ()
    {
        EventService.OnClearAllClick -= HandleClearAll;
        EventService.OnRemoveSelectedClick -= HandleRemoveSelected;
    }

    #region Event Handlers

    private void HandleDragEnter ()
    {
        if (!Container.DraggedButton.IsDraggable)
            return;
        dropClass = "can-drop";
    }

    private void HandleDrop ()
    {
        if (!Container.DraggedButton.IsDraggable)
            return;
        ButtonModel model = new ()
        {
            Id = Guid.NewGuid (),
            IsDraggable = false,
            ComponentType = ComponentType.Button,
            Name = "Button " + new Random ().Next (0, 50)
        };
        Buttons.Add (model);
        dropClass = "";
    }

    private void HandleDragLeave ()
    {
        dropClass = "";
    }

    private async Task HandleClearAll ()
    {
        if (Container.Buttons != null)
            Buttons.Clear ();
        await InvokeAsync (StateHasChanged);
    }

    private async Task HandleRemoveSelected ()
    {
        ButtonModel? model=Buttons.FirstOrDefault (x => x.Id != null && x.Id == Container.ClickedButtonId);
        if(model!=null)
            Buttons.Remove (model);
        await InvokeAsync (StateHasChanged);
    }

    #endregion


}