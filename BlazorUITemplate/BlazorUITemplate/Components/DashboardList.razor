@using BlazorUITemplate.Data
@using BlazorUITemplate.Enums
@using BlazorUITemplate.Pages
@using BlazorUITemplate.Services
@inject EventService EventService

<div class="dashboard-dropzone @dropClass"
     ondragover="event.preventDefault();"
     ondragstart="event.dataTransfer.setData('',event.target.id)"
     @ondrop="HandleDrop"
     @ondragenter="HandleDragEnter"
     @ondragleave="HandleDragLeave">

    @foreach (var button in Buttons)
    {
        <ButtonComponent ButtonModel="@button"/>
    }

    @foreach (var input in Inputs)
    {
        <InputComponent InputModel="@input"/>
    }

</div>

@code {
    [CascadingParameter] Container Container { get; set; }
    List<ButtonModel> Buttons = new ();
    List<InputModel> Inputs = new ();
    List<ImageModel> Images = new ();

    string dropClass = "";

    protected override void OnInitialized ()
    {
        EventService.OnClearAll += HandleClearAll;
        EventService.OnRemoveSelected += OnRemoveSelectedEventHandler;
    }

    public void Dispose ()
    {
        EventService.OnClearAll -= HandleClearAll;
        EventService.OnRemoveSelected -= OnRemoveSelectedEventHandler;
    }

    #region Event Handlers

    private void HandleDragEnter ()
    {
        dropClass = "can-drop";
    }

    private void HandleDrop ()
    {
        if (Container.DraggingComponent == null)
            return;
        if (!Container.DraggingComponent.IsDraggable)
            return;

        switch (Container.DraggingComponent)
        {
            case ButtonModel buttonModel:
            {
                ButtonModel copy = new ()
                {
                    Id = Guid.NewGuid (),
                    IsDraggable = false,
                    Name = buttonModel.Name,
                    ButtonColor = buttonModel.ButtonColor,
                    ButtonClass = buttonModel.ButtonClass,
                    Width = buttonModel.Width,
                    Height = buttonModel.Height
                };
                Buttons.Add (copy);
                break;
            }
            case InputModel inputModel:
            {
                InputModel copy = new ()
                {
                    Id = Guid.NewGuid (),
                    IsDraggable = false,
                    Placeholder = inputModel.Placeholder
                };
                Inputs.Add (copy);
                break;
            }
            case ImageModel imageModel:
            {
                ImageModel copy = new ()
                {
                    Id = Guid.NewGuid (),
                    IsDraggable = false,
                    Url = imageModel.Url
                };
                Images.Add (copy);
                break;
            }
        }

        dropClass = "";
        StateHasChanged ();
    }

    private void HandleDragLeave ()
    {
        dropClass = "";
    }

    private async Task HandleClearAll ()
    {
        Buttons.Clear ();
        Inputs.Clear ();
        Images.Clear ();
        await InvokeAsync (StateHasChanged);
    }

    private bool OnRemoveSelectedEventHandler()
    {
        switch (Container.SelectedComponent)
        {
            case ButtonModel buttonModel:
            {
                var button=Buttons.FirstOrDefault(x=>x.Id==buttonModel.Id);
                if(button!=null)
                {
                    Buttons.Remove (button);
                    StateHasChanged ();
                }

                break;
            }
            case InputModel inputModel:
            {
                var input=Inputs.FirstOrDefault(x=>x.Id==inputModel.Id);
                if(input!=null)
                {
                    Inputs.Remove (input);
                    StateHasChanged ();
                }

                break;
            }
            case ImageModel imageModel:
            {
                var image=Images.FirstOrDefault(x=>x.Id==imageModel.Id);
                if(image!=null)
                {
                    Images.Remove (image);
                    StateHasChanged ();
                }

                break;
            }
        }

        return false;
    }

    #endregion


}