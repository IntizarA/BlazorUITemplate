@using BlazorUITemplate.Data
@using BlazorUITemplate.Enums
@using BlazorUITemplate.Pages
@using BlazorUITemplate.Services
@inject EventService EventService
@inherits BaseComponent

@if (InputModel.Id==null)
{
    <input type="text" class="form-control draggable" draggable="true"
           placeholder="@InputModel.Placeholder"
           @onclick="@(() => HandleClick (InputModel))"
           @ondragstart="@(() => HandleDragStart (InputModel))"
           disabled/>
}
else
{
    <div  class="input-parent resizable" 
         style="width:@Width; height:@Height;"
         @onmousemove="OnMouseMove"
         @onmouseleave="OnMouseMove"
         @onmouseout="OnMouseMove">
        <input type="text"  class="dashboard-input"
               style="width:@Width; height:@Height;"
                 placeholder="@InputModel.Placeholder" @bind="SizeInput" @oninput="UpdateSize" disabled>
            <div class="resizer top" @onmousedown='(e) => StartResize (e, "top")'></div>
            <div class="resizer right" @onmousedown='(e) => StartResize (e, "right")'></div>
            <div class="resizer bottom" @onmousedown='(e) => StartResize (e, "bottom")'></div>
            <div class="resizer left" @onmousedown='(e) => StartResize (e, "left")'></div>
            <div class="resizer top-left" @onmousedown='(e) => StartResize (e, "top-left")'></div>
            <div class="resizer top-right" @onmousedown='(e) => StartResize (e, "top-right")'></div>
            <div class="resizer bottom-left" @onmousedown='(e) => StartResize (e, "bottom-left")'></div>
            <div class="resizer bottom-right" @onmousedown='(e) => StartResize (e, "bottom-right")'></div>
    </div>
}

@code {
    
    [Parameter] public InputModel InputModel { get; set; }
    
    [Parameter] public string Width { get; set; } = "150px";
    [Parameter] public string Height { get; set; } = "40px";
    [Parameter] public string InputClass { get; set; } = "";

    
    private string SizeInput
    {
        get => $"{Width} x {Height}";
        set
        {
            var sizes = value.Split('x', 'X');
            if (sizes.Length == 2)
            {
                Width = sizes[0].Trim();
                Height = sizes[1].Trim();
            }
        }
    }
    
    private void UpdateSize(ChangeEventArgs eventArgs)
    {
        SizeInput = eventArgs.Value.ToString();
        StateHasChanged();
    }
    
    private void StartResize (MouseEventArgs eventArgs, string resizer)
    {
        Resize (eventArgs,resizer,Width,Height);
    }

    private void OnMouseMove (MouseEventArgs eventArgs)
    {
        var sizes=MouseMove (eventArgs, Width, Height);
        Width = sizes.Item1;
        Height = sizes.Item2;
    }

    private void OnMouseUp (MouseEventArgs eventArgs)
    {
        StopResize ();
    }

    private void HandleDragStart (InputModel selectedInputModel)
    {
        HandleDrag (selectedInputModel);
    }


    private void HandleClick (InputModel selectedInputModel)
    {
        HandleClick (selectedInputModel);
    }

}