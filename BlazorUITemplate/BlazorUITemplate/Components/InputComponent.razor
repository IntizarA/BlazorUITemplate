@using BlazorUITemplate.Data
@using BlazorUITemplate.Enums
@using BlazorUITemplate.Pages
@using BlazorUITemplate.Services
@inject EventService EventService

@if (canDraggable)
{
    <input type="text" class="@draggable" draggable="true"
           placeholder="@InputModel.Placeholder"
           @onclick="@(() => HandleClick (InputModel))"
           @ondragstart="@(() => HandleDragStart (InputModel))"
           disabled/>
}
else
{
    <div class="dashboard-button  @resizable" style="width:@Width; height:@Height; "
         @onmousemove="OnMouseMove"
                        @onmouseleave="OnMouseMove"
                        @onmouseout="OnMouseMove">
        <input type="text" 
               style="width:@Width; height:@Height; 
               background-color: @inputColor"
                 placeholder="@InputModel.Placeholder">
        @if (CanResize)
        {
            <div class="resizer top" @onmousedown='(e) => StartResize (e, "top")'></div>
            <div class="resizer right" @onmousedown='(e) => StartResize (e, "right")'></div>
            <div class="resizer bottom" @onmousedown='(e) => StartResize (e, "bottom")'></div>
            <div class="resizer left" @onmousedown='(e) => StartResize (e, "left")'></div>
            <div class="resizer top-left" @onmousedown='(e) => StartResize (e, "top-left")'></div>
            <div class="resizer top-right" @onmousedown='(e) => StartResize (e, "top-right")'></div>
            <div class="resizer bottom-left" @onmousedown='(e) => StartResize (e, "bottom-left")'></div>
            <div class="resizer bottom-right" @onmousedown='(e) => StartResize (e, "bottom-right")'></div>
        }
    </div>
}

@code {
    private ElementReference inputRef;
    private string inputColor;

    #region Test Resize

    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string Width { get; set; } = "150px";
    [Parameter] public string Height { get; set; } = "40px";
    [Parameter] public string resizable { get; set; } = "100px";
    [Parameter] public bool CanResize { get; set; } = true;
    private bool canDraggable = true;
    private bool isResizing = false;
    private string currentResizer = "";
    private double startX, startY, startWidth, startHeight;

    protected override void OnInitialized ()
    {
        inputColor = ColorGenerator.GenerateRandomColor ();
        EventService.OnMouseUp += HandleGlobalMouseUpEvent;

        canDraggable = InputModel.Id == null;
        draggable = InputModel.Id == null ? "draggable" : "";

        CanResize = InputModel.Id != null;
        resizable = InputModel.Id != null ? "resizable" : "";
        Console.WriteLine ($"Can resize initialized:{CanResize}");
    }

    public void Dispose ()
    {
        EventService.OnMouseUp -= HandleGlobalMouseUpEvent;
    }

    private void StartResize (MouseEventArgs e, string resizer)
    {
        Console.WriteLine ("StartResize outside of if");
        if (CanResize)
        {
            Console.WriteLine ("Starting resize Input");
            isResizing = true;
            currentResizer = resizer;
            startX = e.ClientX;
            startY = e.ClientY;
            startWidth = double.Parse (Width.Replace ("px", ""));
            startHeight = double.Parse (Height.Replace ("px", ""));
        }
    }

    private void OnMouseMove (MouseEventArgs e)
    {
        if (isResizing)
        {
            Console.WriteLine ("isResizing");
            double newWidth = startWidth;
            double newHeight = startHeight;

            if (currentResizer.Contains ("right"))
            {
                newWidth = startWidth + (e.ClientX - startX);
            }

            if (currentResizer.Contains ("left"))
            {
                newWidth = startWidth - (e.ClientX - startX);
                if (newWidth > 0)
                {
                    Width = $"{newWidth}px";
                }
            }

            if (currentResizer.Contains ("bottom"))
            {
                newHeight = startHeight + (e.ClientY - startY);
            }

            if (currentResizer.Contains ("top"))
            {
                newHeight = startHeight - (e.ClientY - startY);
                if (newHeight > 0)
                {
                    Height = $"{newHeight}px";
                }
            }

            Width = $"{newWidth}px";
            Height = $"{newHeight}px";
            StateHasChanged ();
        }
    }

    private void OnMouseUp (MouseEventArgs e)
    {
        isResizing = false;
        currentResizer = "";
    }

    private void HandleGlobalMouseUpEvent (MouseEventArgs eventArgs)
    {
        Console.WriteLine ("Global Mouse Up Detected");
        isResizing = false;
        currentResizer = "";
    }

    #endregion

    [CascadingParameter] Container Container { get; set; }
    [Parameter] public InputModel InputModel { get; set; }
    [Parameter] public string draggable { get; set; }

    private void HandleDragStart (InputModel selectedInputModel)
    {
        Container.DraggingType = ComponentType.Input;
        Container.DraggedInput = selectedInputModel;
    }


    private void HandleClick (InputModel selectedInputModel)
    {
        //Container.ClickedButtonId = selectedButtonModel.Id;
    }

}